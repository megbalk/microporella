library(ggplot2)
library(data.table)
library(evolqg)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(ggplot2)
library(data.table)
library(evolqg)
install.packages('evolqg')
library(ggplot2)
library(data.table)
library(evolqg)
install.packages("evolqg")
install.packages("classInt")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(ggplot2)
library(data.table)
library(evolqg)
library(ggplot2)
library(data.table)
library(evolqg)
library(ggplot2)
library(data.table)
library(evolqg)
install.packages("evolqg")
install.packages('matrix')
install.packages('Matrix')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(ggplot2)
library(data.table)
library(evolqg)
sessionInfo()
install.packages('evolqg')
install.packages('devtools')
sessionInfo()
library(devtools)
install_github("lem-usp/evolqg")
install_github("zarquon42b/Morpho", local=FALSE)
install.packages('units')
install.packages('rcpp')
install.packages('Rcpp')
install.packages('units')
install.packages('units')
install_github("zarquon42b/Morpho", local=FALSE)
install.packages('MCMCpack')
install.packages('Rvcg')
install.packages('Rvcg')
install.packages('sf')
install.packages('RcppEigen')
install.packages('SparseM')
install.packages('quantreg')
install.packages('quantreg')
install.packages('igraph')
devtools::install_github("igraph/rigraph")
install.packages('Matrix')
install.packages('Matrix')
install.packages("Matrix", repos="http://R-Forge.R-project.org")
install.packages("Matrix", repos="http://R-Forge.R-project.org")
devtools::install_github("igraph/rigraph")
install.packages('quantreg')
library(ggplot2)
library(data.table)
library(evolqg)
install.packages('evolqg')
library(ggplot2)
library(data.table)
library(evolqg)
library(dplyr)
library(nse)
install.packages('nse')
library(nse)
library(grid)
install.packages('grid')
install.packages("grid")
#library(grid)
library(gridBase)
library(gridExtra)
library(MCMCglmm)
library(MCMCglmm)
library(corrplot)
library(MASS)
library(reshape2)
library(scatterplot3d)
library(rgl)
library(scales)
library(RColorBrewer)
library(coin)
library(coin)
in_data<-read.table("chet_dat_rm.txt", header=TRUE,stringsAsFactors = F)
head(in_data)
in_age<-read.table("chet_age.txt", header=TRUE,stringsAsFactors = F)
colnames(in_age)=c("age","COL","SP")
head(in_age)
#Merge data sp by age
indat=merge(in_data,in_age,by="COL")
#Extract unique elements and trait names
colony_list<-unique(in_data$COL)
length(colony_list)
species_list<-unique(in_data$SP)
length(species_list)
traits=names(indat[,4:52])
colNums <- match(c(traits,"COL"),names(indat))
indat=as.data.frame(indat)
Fig <- list ()
for (i in 1:length(traits)){
trt=traits[i]
range_bin=c(min(indat[,3+i],na.rm = T),max(indat[,3+i],na.rm = T))
Fig[[i]] = ggplot(data=indat,aes_string(x=trt,fill="SP.x"))+
geom_histogram(position="identity",binwidth = (range_bin[2]-range_bin[1])/30)+
theme(legend.position="none",text = element_text(size=20))
rm(range_bin)
}
ml <- marrangeGrob(Fig, nrow=7, ncol=7)
capabilities()
Sys.getenv("DISPLAY")
x11()
x11()
Sys.getenv("DISPLAY")
capabilities()
capabilities()
setwd("~/Documents/GitHub/bryozoa/microporella/Scripts")
setwd("~/Documents/GitHub/bryozoa/microporella/")
#### LOAD PACKAGES ----
source("Scripts/env.R")
#### GET PATH -----
images.path <- "/home/voje-lab/Desktop/Microporella"
## get folder names
list = list.files(path = images.path,
full.names = TRUE,
recursive = TRUE)
##### PARSE FILE NAMES -----
listPath <- unlist(list)
length(listPath)
list.trim <- gsub(list,
pattern = images.path,
replacement = "")
list.parse <- str_split(list.trim,
pattern = "/")
folder <- c()
subfolder <- c()
fileName <- c()
ext <- c()
for(i in 1:length(list.parse)){
folder[i] <- list.parse[[i]][1]
if(isTRUE(endsWith(list.parse[[i]][2], ".txt"))){
fileName[i] <- list.parse[[i]][2]
subfolder[i] <- "NONE"
}
else if(isTRUE(endsWith(list.parse[[i]][2], ".tif"))){
fileName[i] <- list.parse[[i]][2]
subfolder[i] <- "NONE"
}
else{
subfolder[i] <- list.parse[[i]][2]
fileName[i] <- list.parse[[i]][3]
}
if(isTRUE(endsWith(fileName[i], ".txt"))){
ext[i] <- "txt"
}
else{
ext[i] <- "tif"
}
}
image.list <- str_split(fileName, pattern = "\\.") #for microporella
Image_ID <- c()
specimenNR <- c()
for(i in 1:length(image.list)){
Image_ID[i] <- paste0(image.list[[i]][1], ".", image.list[[i]][2])
specimenNR[i] <- image.list[[i]][2]
}
df.list <- data.frame(path = listPath,
folder = folder,
subfolder = subfolder,
image = specimenNR,
ext = ext,
fileName = fileName,
Image_ID = Image_ID,
stringsAsFactors = FALSE)
nrow(df.list)
nrow(df.list[df.list$ext == "tif",]) #should be half
sort(table(df.list$Image_ID)) #for microporella
unique(duplicated(df.list$fileName)) #should all be FALSE
list.txt <- listPath[!grepl("*.tif",
listPath)]
length(list.txt)
txtPath <- unlist(list.txt)
txt.df <- data.frame()
for(i in 1:length(txtPath)){
f <- read.table(txtPath[i],
sep = "^",
fileEncoding = "UTF-16",
skip = 1)
## now make two columns, using "=" as deliminator
ff <- cSplit(f, 'V1',
sep = "=",
stripWhite = TRUE,
type.convert = FALSE)
#seems Condition is multiple "="
condition <- str_split(ff[ff$V1_1 == "Condition",],
pattern = "\ ")
av <- c(condition[[2]][1],condition[[3]][1])
mag <- c(condition[[3]][2], condition[[4]][1])
wd <- c(condition[[4]][2], condition[[5]][1])
lensMode <- c(condition[[5]][2], condition[[6]][1])
path <- c("path", txtPath[i])
cond.paste <- paste(ff$V1_2[ff$V1_1 == "Condition"],
ff$V1_3[ff$V1_1 == "Condition"],
ff$V1_4[ff$V1_1 == "Condition"],
ff$V1_5[ff$V1_1 == "Condition"],
ff$V1_6[ff$V1_1 == "Condition"],
sep = " ")
ff2 <- ff
ff2$V1_2[ff2$V1_1 == "Condition"] <- cond.paste
ff3 <- ff2[,1:2]
ff4 <- rbind(path, as.data.frame(ff3), av, mag, wd, lensMode)
names <- ff4$V1_1
ff5 <- as.data.frame(t(ff4[,-1]))
colnames(ff5) <- names
txt.df <- rbind(txt.df, ff5)
print(paste0(txtPath[i], " ", i))
}
nrow(df.list)
nrow(df.list[df.list$ext == "tif",]) #should be half
14694/2
nrow(txt.df)
txt.df$fileName <- basename(txt.df$path)
txt.image.list <- str_split(txt.df$fileName,
pattern = "\\.")
txt.df$image <- ""
for(i in 1:length(txt.image.list)){
txt.df$image[i] <- txt.image.list[[i]][2]
}
txt.df$image
#### 3. COMBINE IMAGE AND TEXT FILES ----
## make just images
df.images <- df.list[df.list$ext == "tif",]
length(setdiff(df.images$fileName, txt.df$ImageName)) #should be none
length(setdiff(txt.df$ImageName, df.images$fileName)) #should be none
setdiff(df.images$fileName, txt.df$ImageName)
setdiff(txt.df$ImageName, df.images$fileName)
colnames(df.image.meta)[colnames(df.image.meta) == 'specimenNR.x'] <- 'specimenNR.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'specimenNR.y'] <- 'specimenNR.txt'
colnames(df.image.meta)[colnames(df.image.meta) == 'fileName.x'] <- 'fileName.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'fileName.y'] <- 'fileName.txt'
colnames(df.image.meta)[colnames(df.image.meta) == 'path.x'] <- 'path.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'path.y'] <- 'path.txt'
df.image.meta <- merge(df.images, txt.df,
by = "image",
all.x = TRUE, all.y = TRUE)
nrow(df.image.meta)
colnames(df.image.meta)[colnames(df.image.meta) == 'specimenNR.x'] <- 'specimenNR.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'specimenNR.y'] <- 'specimenNR.txt'
colnames(df.image.meta)[colnames(df.image.meta) == 'fileName.x'] <- 'fileName.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'fileName.y'] <- 'fileName.txt'
colnames(df.image.meta)[colnames(df.image.meta) == 'path.x'] <- 'path.tif'
colnames(df.image.meta)[colnames(df.image.meta) == 'path.y'] <- 'path.txt'
#### 4. CHECK METADATA AND FILE INFO ----
## make check in ImageName matches fileName
df.image.meta$ImageNameCheck <- df.image.meta$fileName.tif == df.image.meta$ImageName
unique(df.image.meta$ImageNameCheck )
df.image.meta$magCheck <- df.image.meta$Mag == "x50"
unique( <- df.image.meta$Mag == "x50")
unique(df.image.meta$magCheck)
df.image.meta[df.image.meta$magCheck == FALSE]
df.image.meta[df.image.meta$magCheck == FALSE,]
df.image.meta$AVCheck <- df.image.meta$Vacc == "15.0kV"
df.image.meta$AVCheck
unique(df.image.meta$AVCheck )
df.image.meta.trim <- df.image.meta[df.image.meta$magCheck == TRUE,]
#omit any false
df.image.meta.trim <- df.image.meta.trim[df.image.meta.trim$AVCheck == TRUE,]
nrow(df.image.meta) #7360
nrow(df.image.meta.trim)#7324, only lost 36 images
##double check no differences in txt file names
df.list.txt <- df.list[df.list$ext == "txt",]
setdiff(df.list.txt$fileName, txt.df$fileName)
#### LOAD DATA ----
meta.df <- read.csv("Data/Microporella_SEMs_EDM+Mali_05.06.2024.csv",
header = TRUE)
images.path <- "/home/voje-lab/Desktop/microporella-jpg"
imageNames.jpg = list.files(path = images.path,
full.names = TRUE,
recursive = TRUE)
imageNames.jpg.trim <- gsub(imageNames.jpg,
pattern = paste0(images.path, "/"),
replacement = "")
imageNames <- gsub(imageNames.jpg.trim,
pattern = ".jpg",
replacement = "")
#### COMBINE ----
length(imageNames) #7333
imageNames[duplicated(imageNames)] #none
nrow(meta.df) #8828
dupes <-meta.df$Image_ID[duplicated(meta.df$Image_ID)] #these are repeats
dupes
######for now, ignore and remove these-------
meta.df.trim <- meta.df[!(meta.df$Image_ID %in% dupes),]
nrow(meta.df.trim) #8812
#setdiff(imageNames, meta.df$Image_ID) #these are not in the metadata files...
#length(setdiff(imageNames, meta.df$Image_ID)) #63
setdiff(imageNames, meta.df.trim$Image_ID) #these are not in the metadata files...
length(setdiff(imageNames, meta.df.trim$Image_ID)) #71
